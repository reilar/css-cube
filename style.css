/* CSS Cube, using CSS Houdini working draft */

body {
	--background-color: rgb(17, 17, 17);
	--header-color: rgb(202, 144, 69);
	background: var(--background-color);
}

.wrapper {
	width: 200px;
	height: 200px;
	perspective: 800px;
	margin: 200px auto;
	animation: explode 7s infinite alternate ease;
	animation-delay: 5s;
}

.description {
	padding-left: 30px;
	color: var(--header-color);
}

.cube {
	width: 100%;
	height: 100%;
	position: relative;
	animation: rotate 3s infinite linear, move-y 3s alternate infinite ease-in-out,
		move-x 3s alternate infinite ease-in-out, zoom 3s alternate infinite ease-in-out;
	transform-style: preserve-3d;
}

.face {
	position: absolute;
	width: 100%;
	height: 100%;
	background-image: url("image.png");
}

.front {
	transform: rotateX(0deg) translateZ(calc(var(--cube-size) * 1px));
}
.back {
	transform: rotateX(-180deg) translateZ(calc(var(--cube-size) * 1px));
}
.left {
	transform: rotateY(-90deg) translateZ(calc(var(--cube-size) * 1px));
}
.right {
	transform: rotateY(90deg) translateZ(calc(var(--cube-size) * 1px));
}
.top {
	transform: rotateX(90deg) translateZ(calc(var(--cube-size) * 1px));
}
.bottom {
	transform: rotateX(-90deg) translateZ(calc(var(--cube-size) * 1px));
}

/* Houdini */
@property --cube-size {
	syntax: "<number>";
	initial-value: 100;
	inherits: true;
}

@keyframes rotate {
	from {
		transform: rotateX(0deg) rotateY(0deg);
	}
	to {
		transform: rotateX(360deg) rotateY(360deg);
	}
}

@keyframes move-y {
	to {
		transform: translateY(300px);
	}
}

@keyframes move-x {
	to {
		transform: translateX(300px);
	}
}

@keyframes zoom {
	to {
		transform: scale(1.5);
	}
}

@keyframes explode {
	0%,
	100% {
		--cube-size: 100;
	}
	50% {
		--cube-size: 170;
	}
}
